name: Generate geopackages for DSRA

# Workflow runs when manually triggered using the UI or API.
on:
  push:
    branches: [geopackage-action]
  workflow_dispatch:

jobs:
  build-gpkgs:
    runs-on: ubuntu-latest

    steps:
    - name: Free up disk space by deleting unused software
      run: |
        df -h
        $TIME_RUN sudo eatmydata rm -rf /usr/share/dotnet       # 24.1 GB
        $TIME_RUN sudo eatmydata rm -rf /usr/local/lib/android  # 11.3 GB
        $TIME_RUN sudo eatmydata rm -rf /opt/ghc                #  1.8 GB
        $TIME_RUN sudo eatmydata rm -rf /usr/share/swift        #  1.3 GB
        $TIME_RUN sudo eatmydata rm -rf /usr/local/graalvm      #  1.0 GB
        $TIME_RUN sudo eatmydata rm -rf "$AGENT_TOOLSDIRECTORY" #  6.0 GB
        df -h

    - name: Checkout using current working branch with lfs enabled
      uses: actions/checkout@v2
      with:
        ref: reduce-disk-usage
        lfs: 'true'

    - name: Setup .env
      env:
        MY_PAT: ${{ secrets.MY_PAT }}   
      run: |
        cat <<EOF > .env
        POSTGRES_USER=postgres
        POSTGRES_PASS=password
        POSTGRES_PORT=5432
        POSTGRES_HOST=db-opendrr
        DB_NAME=opendrr
        POPULATE_DB=0

        KIBANA_ENDPOINT=http://kibana-opendrr:5601
        ES_ENDPOINT=http://elasticsearch-opendrr:9200

        loadDsraScenario=true
        loadPsraModels=false
        loadHazardThreat=false
        loadPhysicalExposure=false
        loadRiskDynamics=false
        loadSocialFabric=false
        loadHexGrid=false

        ADD_DATA_PRINT_FUNCNAME=true
        ADD_DATA_PRINT_LINENO=true
        EOF
        chmod 600 .env

        cat <<EOF > python/config.ini
        [rds]
        postgres_host = db-opendrr
        postgres_port = 5432
        postgres_un = postgres
        postgres_pw = password
        postgres_db = opendrr
        postgres_address = db-opendrr:5432/opendrr

        [es]
        es_un = elastic
        es_pw = changeme
        es_endpoint = elasticsearch-opendrr:9200
        kibana_endpoint = localhost:5601

        [auth]
        github_token = $MY_PAT
        EOF
        chmod 600 python/config.ini

    - name: Set up docker containers, build database, and exit with timeout
      continue-on-error: true
      run: docker compose up --build
      timeout-minutes: 120

    - name: Install ogr2ogr
      run: |
        df -h
        sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install gdal-bin
        npm install ogr2ogr

    - name: Generate gpkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mkdir zipped

        echo "Getting list of eq scenarios"
        curl -H "Authorization: token ${GITHUB_TOKEN}" \
          --retry 999 --retry-max-time 0 \
          -o FINISHED.json \
          -L https://api.github.com/repos/OpenDRR/earthquake-scenarios/contents/FINISHED

        mapfile -t SCENARIOS < <(jq -r '.[].name | scan("(?<=s_lossesbyasset_).*(?=_r1)")' FINISHED.json)

        for i in "${SCENARIOS[@]}"
        do
          ogr2ogr -f GPKG dsra_${i}_indicators_b.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM results_dsra_${i}.dsra_${i}_indicators_b" -nln dsra_${i}_indicators_s
          zip zipped/dsra_${i}_indicators_b dsra_${i}_indicators_b.gpkg

          ogr2ogr -f GPKG dsra_${i}_indicators_s.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM results_dsra_${i}.dsra_${i}_indicators_s" -nln dsra_${i}_indicators_s
          zip zipped/dsra_${i}_indicators_s dsra_${i}_indicators_s.gpkg

          ogr2ogr -f GPKG dsra_${i}_indicators_csd.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM results_dsra_${i}.dsra_${i}_indicators_csd" -nln dsra_${i}_indicators_csd
          zip zipped/dsra_${i}_indicators_csd dsra_${i}_indicators_csd.gpkg

          ogr2ogr -f GPKG dsra_${i}_shakemap.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM results_dsra_${i}.dsra_${i}_shakemap" -nln dsra_${i}_shakemap
          zip zipped/dsra_${i}_shakemap dsra_${i}_shakemap.gpkg
        done

        layers=(dsra_all_scenarios_building dsra_all_scenarios_cduid dsra_all_scenarios_csduid dsra_all_scenarios_dauid dsra_all_scenarios_eruid dsra_all_scenarios_fsauid dsra_all_scenarios_pruid dsra_all_scenarios_sauid)
        for i in "${layers[@]}"
        do
          ogr2ogr -f GPKG ${i}.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM dsra.${i}" -nln ${i}
          zip zipped/${i} ${i}.gpkg
        done

        ogr2ogr -f GPKG shakemap_scenario_extents.gpkg PG:"host=localhost port=5432 user=postgres dbname=opendrr password=password" -sql "SELECT * FROM gmf.shakemap_scenario_extents" -nln shakemap_scenario_extents
        zip zipped/shakemap_scenario_extents shakemap_scenario_extents.gpkg

    - name: Push files to geopackage-update branch and open PR in earthquake-scenarios repo
      env:
        # PAT requires read:org
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        USER: ${{ github.actor }}
      run: |
        HOME=$PWD
        DESTINATION_REPO="DamonU2/earthquake-scenarios"

        TEMP_DIR=$(mktemp -d)

        echo "Cloning earthquake-scenarios repository"
        git clone "https://$GITHUB_TOKEN@github.com/$DESTINATION_REPO.git" "$TEMP_DIR"
        cd $TEMP_DIR
        git fetch -a

        EXISTING_BRANCH=$(git show-ref "geopackage-update" | wc -l)
        if [ $EXISTING_BRANCH == 0 ];
        then
          git checkout -b "geopackage-update"
        else
          git checkout "geopackage-update"
        fi

        echo "Copying files"
        rsync -r --progress "$HOME/zipped/." "$TEMP_DIR/FINISHED/geopackages"
        git add .
        git status
        CHANGES=$(git status -s | wc -l)

        git config --global user.name $USER

        if [ $CHANGES != 0 ];
        then
          git commit -m "Updates to geopackages"
          echo "Pushing commit"
          git push -u origin HEAD:geopackage-update

          if [ $EXISTING_BRANCH == 0 ];
          then
            echo "Creating a pull request"
            gh pr create --fill -B master -H geopackage-update
          else
            echo "Updating pull request"
            gh pr edit geopackage-update -b "Updated"
          fi
        else
          echo "No changes made"
        fi      
